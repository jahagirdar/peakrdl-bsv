{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"peakrdl-bsv Generating BSV Configuration registers from SystemRDL code.","text":"<p>Peakrdl plugin for generated bluespec rtl from system RDL file.</p> <p>This plugin takes an input <code>file.rdl</code> and generates three bluespec files</p> <ol> <li><code>file_signal.bsv</code> This contains the module definition of each individual signal in the rdl file.</li> <li><code>file_reg.bsv</code> This groups the signals into their containing register module.</li> <li><code>file_csr.bsv</code> This creates a module with the registers, address decoding and S/W read write methods.</li> </ol>"},{"location":"#installation-and-usage","title":"Installation and usage","text":"<p>Installing the application</p> <pre><code>pip3 install peakrdl-bsv\n</code></pre> <p>Generating BSV files from test.rdl</p> <pre><code>    peakrdl bsv test.rdl -o .\n</code></pre> <p>This can then be used in your design as follows</p> <pre><code>import file_csr::*;\n...\nConfigCSR_file csr &lt;- mkConfigCSR_file;\n\nrule xyz;\ncsr.reg.signal.write(...)\nendrule\n</code></pre> <p>The hardware side methods defined on a signal module are</p> <ul> <li><code>method Bool pulse()</code> returns true when a 1 is written to the signal. self clearing.</li> <li><code>method Bool swacc()</code> returns true when a s/w read or write operation is performed.</li> <li><code>method Bool swmod()</code> returns true when a write or a read with sideeffect operation is performed.</li> <li><code>method Bool anded()</code> Returns an AND reduced value of the signal.</li> <li><code>method Bool ored();</code> Returns an OR reduced value of the signal.</li> <li><code>method Bool xored()</code> Returns an XOR reduced value of the signal.</li> <li><code>method Action clear()</code> Set's the signal to 0.</li> <li><code>method Action _write(Bit#(n) data)</code> writes <code>data</code> to the register.</li> <li><code>method Bit#(n) _rea</code> Returns the value of the register.</li> </ul>"},{"location":"#example","title":"Example","text":"<p>To see an example</p> <pre><code>cd tests\nmake\n</code></pre> <p>This will generate the required files from the test.rdl file</p>"},{"location":"ai/","title":"Plan | project:cocotb_ralgen","text":"<ul> <li> Public release v0.2.0  #078a984b<ul> <li> Freeze the API  #9af48cf7</li> <li> Cleanup CI  #85fa6a7f</li> <li> Cleanup documentation  #50edecc5</li> <li> Make an explainer video.  #df758733</li> </ul> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#001-2025-03-20","title":"[0.0.1] - 2025-03-20","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>0.0.1 Github Workflow scripts</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>0.0.1 Lint checked warnings from ruff.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>0.0.1 Code related to bsv wrapper over sv reg file.</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at jahagirdar.vs@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#areas-for-contribution","title":"Areas for contribution","text":"<p>The project follows a modular approach to make it easier to support new RTL Generators and Testcases.</p>"},{"location":"contributing/#adding-support-for-a-new-rtl-coding-style","title":"Adding support for a new RTL Coding style.","text":"<p>There are dozens of proprietary and opensource tools for generating RTL code from IP-XACT, SystemRDL, CSV or other inhouse formats. These tools will define their fields in a fixed pattern, e.g. <code>&lt;prefix&gt;_&lt;RegisterName&gt;_&lt;signalName&gt;</code> or <code>&lt;signalName&gt;</code> or ...</p> <p>To add support to a particular style of signal naming,</p> <ol> <li>create a new file under <code>src/peakrdl_cocotb_ralgen/callbacks/bsv.py</code><ol> <li>Preferably name the file as .py <li>define your class and define the read and write functions in it.</li> <li>submit a PR.</li>"},{"location":"contributing/#adding-support-for-a-new-testcases","title":"Adding support for a new TestCases.","text":"<p>The current version of cocotb-ralgen supports reset check and simple rw_test with foreground and background read/write combinations. There are a bunch of additional tests that are normally written for checking registers. To contribute a new test: 1. Add your test to <code>src/peakrdl_cocotb_ralgen/testcases</code> folder 2. Submit a PR.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd cocotb-ralgen\npdm install\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run peakrdl cocotb_ralgen [ARGS...]</code>.</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>pdm run duty format</code> to auto-format the code</li> <li>run <code>pdm run duty check</code> to check everything (fix any warning)</li> <li>run <code>make C tests</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>pdm run duty docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build peakrdl_bsv. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>antlr4-python3-runtime</code> ANTLR 4.13.2 runtime for Python 3 <code>&lt;4.14,&gt;=4.11</code> <code>4.13.2</code> BSD <code>colorama</code> Cross-platform colored terminal text. <code>0.4.6</code> BSD License <code>git-me-the-url</code> Generate sharable links to your Git source <code>&gt;=2.0.3</code> <code>2.1.0</code> GNU General Public License v3 (GPLv3) <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.12</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.44</code> BSD-3-Clause <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=3.1.4</code> <code>3.1.6</code> BSD License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>3.7</code> BSD License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License <code>peakrdl</code> Toolchain for control/status register automation and code generation. <code>&gt;=1.1.0</code> <code>1.2.3</code> GNU General Public License v3 (GPLv3) <code>peakrdl-cheader</code> Generate C Header files from a SystemRDL register model <code>&lt;2,&gt;=1.0.0</code> <code>1.0.0</code> GNU General Public License v3 (GPLv3) <code>peakrdl-cli</code> Command-line tool for control/status register automation and code generation. <code>1.2.3</code> GNU General Public License v3 (GPLv3) <code>peakrdl-html</code> HTML documentation generator for SystemRDL-based register models <code>&lt;3,&gt;=2.10.1</code> <code>2.10.1</code> GNU General Public License v3 (GPLv3) <code>peakrdl-ipxact</code> Import and export IP-XACT XML to/from the systemrdl-compiler register model <code>&lt;4,&gt;=3.4.1</code> <code>3.5.0</code> GNU General Public License v3 (GPLv3) <code>peakrdl-regblock</code> Compile SystemRDL into a SystemVerilog control/status register (CSR) block <code>&lt;2,&gt;=0.19.0</code> <code>0.23.0</code> GPLv3 <code>peakrdl-systemrdl</code> Write a register model to a SystemRDL file <code>&lt;2,&gt;=0.3.0</code> <code>0.3.0</code> GNU General Public License v3 (GPLv3) <code>peakrdl-uvm</code> Generate UVM register model from compiled SystemRDL input <code>&lt;3,&gt;=2.3.0</code> <code>2.3.0</code> GNU General Public License v3 (GPLv3) <code>python-markdown-math</code> Math extension for Python-Markdown <code>0.8</code> BSD 3-Clause License <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.2</code> BSD-3-Clause <code>systemrdl-compiler</code> Parse and elaborate front-end for SystemRDL 2.0 <code>&gt;=1.27.3</code> <code>1.29.3</code> MIT <code>tomli</code> A lil' TOML parser <code>; python_version &lt; \"3.11\"</code> <code>2.2.1</code> ? <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>4.12.2</code> Python Software Foundation License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause <code>backrefs</code> A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>25.1.0</code> MIT License <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.4.1</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.8</code> BSD License <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.12</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.44</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.5.1</code> <code>1.6.1</code> ? <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.10</code> BSD License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.6</code> BSD License <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.10.2</code> ? <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>3.0.2</code> BSD License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.6.1</code> BSD License <code>mkdocs-autorefs</code> Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ? <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.5.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.2</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.6.9</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.29.0</code> ? <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.6</code> ? <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>24.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2</code> <code>4.3.7</code> MIT License <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.14.3</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>requests</code> Python HTTP for Humans. <code>2.32.3</code> Apache-2.0 <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.2</code> BSD-3-Clause <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.2.1</code> ? <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.12.2</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.3.0</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"license/","title":"License","text":"<pre><code>BSD 2-Clause License\n\nCopyright (c) 2024, Vijayvithal\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> peakrdl_bsv<ul> <li> cli</li> <li> exporter</li> <li> print_bsv_csr</li> <li> print_bsv_reg</li> <li> print_bsv_signal</li> <li> templates</li> </ul> </li> </ul>"},{"location":"reference/peakrdl_bsv/","title":"Index","text":""},{"location":"reference/peakrdl_bsv/#peakrdl_bsv","title":"peakrdl_bsv","text":"<p>Top-level package for PeakRDL bsv.</p> <p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>Console script for peakrdl_bsv.</p> </li> <li> <code>exporter</code>           \u2013            <p>PeakRDL BSV exporter.</p> </li> <li> <code>print_bsv_csr</code>           \u2013            <p>Toplevel CSR Module generator.</p> </li> <li> <code>print_bsv_reg</code>           \u2013            <p>Write Bluespec Register file.</p> </li> <li> <code>print_bsv_signal</code>           \u2013            <p>Write Bluespec Signal class.</p> </li> <li> <code>templates</code>           \u2013            <p>Init File.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>BSVExporter</code>           \u2013            <p>PeakRDL BSV exporter main class.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/#peakrdl_bsv.BSVExporter","title":"BSVExporter","text":"<p>PeakRDL BSV exporter main class.</p> <p>Methods:</p> <ul> <li> <code>export</code>             \u2013              <p>Writeout the BSV code.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/#peakrdl_bsv.BSVExporter.export","title":"export","text":"<pre><code>export(\n    top_node: Union[AddrmapNode, RootNode],\n    outputpath: str,\n    input_files: Optional[List[str]] = None,\n    rename: Optional[str] = None,\n    depth: int = 0,\n)\n</code></pre> <p>Writeout the BSV code.</p> Source code in <code>src/peakrdl_bsv/exporter.py</code> <pre><code>def export(\n    self,\n    top_node: Union[AddrmapNode, RootNode],\n    outputpath: str,\n    input_files: Optional[List[str]] = None,\n    rename: Optional[str] = None,\n    depth: int = 0,\n):\n    \"\"\"Writeout the BSV code.\"\"\"\n    rdlc = RDLCompiler()\n    try:\n        for input_file in input_files:\n            rdlc.compile_file(input_file)\n            root = rdlc.elaborate()\n    except Exception:\n        sys.exit()\n    fname = f\"{outputpath}/{top_node.inst.inst_name}\"\n    with open(fname + \"_signal.bsv\", \"w\") as file:\n        walker = RDLWalker(unroll=True)\n        walker.walk(root, PrintBSVSignal(file))\n    with open(fname + \"_reg.bsv\", \"w\") as file:\n        walker = RDLWalker(unroll=True)\n        walker.walk(root, PrintBSVReg(file))\n    with open(fname + \"_csr.bsv\", \"w\") as file:\n        walker = RDLWalker(unroll=True)\n        walker.walk(root, PrintBSVCSR(file))\n</code></pre>"},{"location":"reference/peakrdl_bsv/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/peakrdl_bsv/cli/#peakrdl_bsv.cli","title":"cli","text":"<p>Console script for peakrdl_bsv.</p> <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              <p>Console script for peakrdl_bsv.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/cli/#peakrdl_bsv.cli.main","title":"main","text":"<pre><code>main(args=None)\n</code></pre> <p>Console script for peakrdl_bsv.</p> Source code in <code>src/peakrdl_bsv/cli.py</code> <pre><code>@click.command()\ndef main(args=None):\n    \"\"\"Console script for peakrdl_bsv.\"\"\"\n    click.echo(\n        \"Replace this message by putting your code into \" + \"peakrdl_bsv.cli.main\"\n    )\n    click.echo(\"See click documentation at https://click.palletsprojects.com/\")\n    return 0\n</code></pre>"},{"location":"reference/peakrdl_bsv/exporter/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exporter","text":""},{"location":"reference/peakrdl_bsv/exporter/#peakrdl_bsv.exporter","title":"exporter","text":"<p>PeakRDL BSV exporter.</p> <p>Classes:</p> <ul> <li> <code>BSVExporter</code>           \u2013            <p>PeakRDL BSV exporter main class.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/exporter/#peakrdl_bsv.exporter.BSVExporter","title":"BSVExporter","text":"<p>PeakRDL BSV exporter main class.</p> <p>Methods:</p> <ul> <li> <code>export</code>             \u2013              <p>Writeout the BSV code.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/exporter/#peakrdl_bsv.exporter.BSVExporter.export","title":"export","text":"<pre><code>export(\n    top_node: Union[AddrmapNode, RootNode],\n    outputpath: str,\n    input_files: Optional[List[str]] = None,\n    rename: Optional[str] = None,\n    depth: int = 0,\n)\n</code></pre> <p>Writeout the BSV code.</p> Source code in <code>src/peakrdl_bsv/exporter.py</code> <pre><code>def export(\n    self,\n    top_node: Union[AddrmapNode, RootNode],\n    outputpath: str,\n    input_files: Optional[List[str]] = None,\n    rename: Optional[str] = None,\n    depth: int = 0,\n):\n    \"\"\"Writeout the BSV code.\"\"\"\n    rdlc = RDLCompiler()\n    try:\n        for input_file in input_files:\n            rdlc.compile_file(input_file)\n            root = rdlc.elaborate()\n    except Exception:\n        sys.exit()\n    fname = f\"{outputpath}/{top_node.inst.inst_name}\"\n    with open(fname + \"_signal.bsv\", \"w\") as file:\n        walker = RDLWalker(unroll=True)\n        walker.walk(root, PrintBSVSignal(file))\n    with open(fname + \"_reg.bsv\", \"w\") as file:\n        walker = RDLWalker(unroll=True)\n        walker.walk(root, PrintBSVReg(file))\n    with open(fname + \"_csr.bsv\", \"w\") as file:\n        walker = RDLWalker(unroll=True)\n        walker.walk(root, PrintBSVCSR(file))\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_csr/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> print_bsv_csr","text":""},{"location":"reference/peakrdl_bsv/print_bsv_csr/#peakrdl_bsv.print_bsv_csr","title":"print_bsv_csr","text":"<p>Toplevel CSR Module generator.</p> <p>Classes:</p> <ul> <li> <code>PrintBSVCSR</code>           \u2013            <p>Class to write the CSR module.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/print_bsv_csr/#peakrdl_bsv.print_bsv_csr.PrintBSVCSR","title":"PrintBSVCSR","text":"<pre><code>PrintBSVCSR(bsvfile)\n</code></pre> <p>               Bases: <code>RDLListener</code></p> <p>Class to write the CSR module.</p> <p>Methods:</p> <ul> <li> <code>enter_Addrmap</code>             \u2013              <p>Addressmap handler.</p> </li> <li> <code>enter_Reg</code>             \u2013              <p>Reg Handler.</p> </li> <li> <code>exit_Addrmap</code>             \u2013              <p>Write code for addressmap.</p> </li> </ul> Source code in <code>src/peakrdl_bsv/print_bsv_csr.py</code> <pre><code>def __init__(self, bsvfile):\n    \"\"\"Initialization.\"\"\"\n    self.file = bsvfile\n    self.addressmap = []\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_csr/#peakrdl_bsv.print_bsv_csr.PrintBSVCSR.enter_Addrmap","title":"enter_Addrmap","text":"<pre><code>enter_Addrmap(node)\n</code></pre> <p>Addressmap handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_csr.py</code> <pre><code>def enter_Addrmap(self, node):\n    \"\"\"Addressmap handler.\"\"\"\n    self.addrmap_name = node.get_path_segment()\n    print(f\"import {self.addrmap_name}_reg::*;\", file=self.file)\n    self.interface = \"\"\n    self.instance = \"\"\n    self.method = \"\"\n    self.write_method = \"\"\n    self.read_method = \"\"\n    self.addressmap.append(node.get_path_segment())\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_csr/#peakrdl_bsv.print_bsv_csr.PrintBSVCSR.enter_Reg","title":"enter_Reg","text":"<pre><code>enter_Reg(node)\n</code></pre> <p>Reg Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_csr.py</code> <pre><code>def enter_Reg(self, node):\n    \"\"\"Reg Handler.\"\"\"\n    # print(node.inst.__dict__)\n    self.reg_name = node.get_path_segment()\n    self.hier_path = [*self.addressmap, self.reg_name]\n    self.interface += (\n        f\"interface ConfigReg_HW_{self.reg_name} {self.reg_name.lower()};\\n\"\n    )\n    self.instance += f\"ConfigReg_{self.reg_name} reg_{self.reg_name} &lt;- mkConfigReg_{self.reg_name}();\\n\"\n    self.method += f\"interface ConfigReg_HW_{self.reg_name} {self.reg_name.lower()} = reg_{self.reg_name}.hw;\\n\"\n    self.write_method += (\n        f\"if(address== {node.address_offset})reg_{self.reg_name}.bus.write(data);\\n\"\n    )\n    self.read_method += (\n        f\"if(address== {node.address_offset})rv&lt;-reg_{self.reg_name}.bus.read();\\n\"\n    )\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_csr/#peakrdl_bsv.print_bsv_csr.PrintBSVCSR.exit_Addrmap","title":"exit_Addrmap","text":"<pre><code>exit_Addrmap(node)\n</code></pre> <p>Write code for addressmap.</p> Source code in <code>src/peakrdl_bsv/print_bsv_csr.py</code> <pre><code>    def exit_Addrmap(self, node):\n        \"\"\"Write code for addressmap.\"\"\"\n        # print(node,node.inst.properties)\n        print(\n            f\"\"\"\ninterface ConfigCSR_{self.addrmap_name};\n    {self.interface}\n    method Action write(Bit#(32) address, Bit#(32) data);\n    method ActionValue#(Bit#(32)) read(Bit#(32) address);\nendinterface\n\n(*synthesize*)\nmodule mkConfigCSR_{self.addrmap_name}(ConfigCSR_{self.addrmap_name});\n    {self.instance}\n    {self.method}\n    method Action write(Bit#(32) address,Bit#(32) data);\n    {self.write_method}\n    endmethod\n    method ActionValue#(Bit#(32)) read(Bit#(32) address);\n        let rv=0;\n    {self.read_method}\n    return rv;\n    endmethod\nendmodule\n                  \"\"\",\n            file=self.file,\n        )\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_reg/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> print_bsv_reg","text":""},{"location":"reference/peakrdl_bsv/print_bsv_reg/#peakrdl_bsv.print_bsv_reg","title":"print_bsv_reg","text":"<p>Write Bluespec Register file.</p> <p>Classes:</p> <ul> <li> <code>PrintBSVReg</code>           \u2013            <p>Write Register defination file.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/print_bsv_reg/#peakrdl_bsv.print_bsv_reg.PrintBSVReg","title":"PrintBSVReg","text":"<pre><code>PrintBSVReg(bsvfile)\n</code></pre> <p>               Bases: <code>RDLListener</code></p> <p>Write Register defination file.</p> <p>Methods:</p> <ul> <li> <code>enter_Addrmap</code>             \u2013              <p>Addressmap Handler.</p> </li> <li> <code>enter_Field</code>             \u2013              <p>Field Handler.</p> </li> <li> <code>enter_Reg</code>             \u2013              <p>RegHandler.</p> </li> <li> <code>exit_Reg</code>             \u2013              <p>Write out register file.</p> </li> </ul> Source code in <code>src/peakrdl_bsv/print_bsv_reg.py</code> <pre><code>def __init__(self, bsvfile):\n    \"\"\"Initialize.\"\"\"\n    self.file = bsvfile\n    self.addressmap = []\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_reg/#peakrdl_bsv.print_bsv_reg.PrintBSVReg.enter_Addrmap","title":"enter_Addrmap","text":"<pre><code>enter_Addrmap(node)\n</code></pre> <p>Addressmap Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_reg.py</code> <pre><code>def enter_Addrmap(self, node):\n    \"\"\"Addressmap Handler.\"\"\"\n    self.addrmap_name = node.get_path_segment()\n    print(f\"import {self.addrmap_name}_signal::*;\", file=self.file)\n    self.addressmap.append(node.get_path_segment())\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_reg/#peakrdl_bsv.print_bsv_reg.PrintBSVReg.enter_Field","title":"enter_Field","text":"<pre><code>enter_Field(node)\n</code></pre> <p>Field Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_reg.py</code> <pre><code>def enter_Field(self, node):\n    \"\"\"Field Handler.\"\"\"\n    self.signal_name = node.get_path_segment()\n    reset = \"0\"\n    if \"reset\" in node.inst.properties:\n        reset = node.inst.properties[\"reset\"]\n    self.interface += (\n        f\"interface HW_{self.reg_name}_{self.signal_name} {self.signal_name};\\n\"\n    )\n    self.instance += f\"Ifc_CSRSignal_{self.reg_name}_{self.signal_name} sig_{self.signal_name} &lt;- mkCSRSignal_{self.reg_name}_{self.signal_name}({reset});\\n\"\n    self.method += f\"interface HW_{self.reg_name}_{self.signal_name} {self.signal_name} = sig_{self.signal_name}.hw;\\n\"\n    if node.is_sw_writable:\n        self.write_method += (\n            f\"sig_{self.signal_name}.bus.write(data[{node.high}:{node.low}]);\\n\"\n        )\n    if node.is_sw_readable:\n        self.read_method += f\"let var_{self.signal_name}&lt;-sig_{self.signal_name}.bus.read();\\nrv[{node.high}:{node.low}]=var_{self.signal_name};\\n\"\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_reg/#peakrdl_bsv.print_bsv_reg.PrintBSVReg.enter_Reg","title":"enter_Reg","text":"<pre><code>enter_Reg(node)\n</code></pre> <p>RegHandler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_reg.py</code> <pre><code>def enter_Reg(self, node):\n    \"\"\"RegHandler.\"\"\"\n    self.reg_name = node.get_path_segment()\n    self.hier_path = [*self.addressmap, self.reg_name]\n    self.interface = \"\"\n    self.instance = \"\"\n    self.method = \"\"\n    self.write_method = \"\"\n    self.read_method = \"\"\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_reg/#peakrdl_bsv.print_bsv_reg.PrintBSVReg.exit_Reg","title":"exit_Reg","text":"<pre><code>exit_Reg(node)\n</code></pre> <p>Write out register file.</p> Source code in <code>src/peakrdl_bsv/print_bsv_reg.py</code> <pre><code>    def exit_Reg(self, node):\n        \"\"\"Write out register file.\"\"\"\n        width = node.inst.properties[\"regwidth\"]\n        print(\n            f\"\"\"\ninterface ConfigReg_HW_{self.reg_name};\n    {self.interface}\nendinterface\n\ninterface ConfigReg_Bus_{self.reg_name};\n    method Action write( Bit#({width}) data);\n    method ActionValue#(Bit#({width})) read();\nendinterface\n\ninterface ConfigReg_{self.reg_name};\ninterface ConfigReg_HW_{self.reg_name} hw;\ninterface ConfigReg_Bus_{self.reg_name} bus;\nendinterface\n(*synthesize*)\nmodule mkConfigReg_{self.reg_name}(ConfigReg_{self.reg_name});\n    {self.instance}\ninterface ConfigReg_HW_{self.reg_name} hw;\n    {self.method}\nendinterface\ninterface ConfigReg_Bus_{self.reg_name} bus;\n    method Action write(Bit#({width}) data);\n    {self.write_method}\n    endmethod\n    method ActionValue#(Bit#({width})) read;\n        Bit#({width}) rv=0;\n    {self.read_method}\n    return rv;\n    endmethod\nendinterface\nendmodule\n                  \"\"\",\n            file=self.file,\n        )\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> print_bsv_signal","text":""},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal","title":"print_bsv_signal","text":"<p>Write Bluespec Signal class.</p> <p>Classes:</p> <ul> <li> <code>PrintBSVSignal</code>           \u2013            <p>Write Bluespec Signal class.</p> </li> </ul>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal.PrintBSVSignal","title":"PrintBSVSignal","text":"<pre><code>PrintBSVSignal(bsvfile)\n</code></pre> <p>               Bases: <code>RDLListener</code></p> <p>Write Bluespec Signal class.</p> <p>Methods:</p> <ul> <li> <code>enter_Addrmap</code>             \u2013              <p>Address Map Handler.</p> </li> <li> <code>enter_Field</code>             \u2013              <p>Field  Handler.</p> </li> <li> <code>enter_Reg</code>             \u2013              <p>Reg  Handler.</p> </li> <li> <code>exit_Addrmap</code>             \u2013              <p>Addrmap  Handler.</p> </li> <li> <code>exit_Reg</code>             \u2013              <p>Reg  Handler.</p> </li> </ul> Source code in <code>src/peakrdl_bsv/print_bsv_signal.py</code> <pre><code>def __init__(self, bsvfile):\n    \"\"\"Initialize.\"\"\"\n    self.indent = 0\n    self.file = bsvfile\n    self.field_count = 0\n    self.addressmap = []\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal.PrintBSVSignal.enter_Addrmap","title":"enter_Addrmap","text":"<pre><code>enter_Addrmap(node)\n</code></pre> <p>Address Map Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_signal.py</code> <pre><code>def enter_Addrmap(self, node):\n    \"\"\"Address Map Handler.\"\"\"\n    self.addressmap.append(node.get_path_segment())\n    self.addrmap_name = node.get_path_segment()\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal.PrintBSVSignal.enter_Field","title":"enter_Field","text":"<pre><code>enter_Field(node)\n</code></pre> <p>Field  Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_signal.py</code> <pre><code>def enter_Field(self, node):\n    \"\"\"Field  Handler.\"\"\"\n    name = node.get_path_segment()\n    attr = node.inst.properties\n    attr[\"width\"] = node.width\n    attr[\"signal_name\"] = name\n    attr[\"reg_name\"] = self.reg_name\n    if \"sw\" in node.inst.properties:\n        attr[\"sw\"] = f\"{node.inst.properties['sw']}\"\n    if \"hw\" in node.inst.properties:\n        attr[\"hw\"] = f\"{node.inst.properties['hw']}\"\n\n    env = Environment(\n        loader=PackageLoader(\"peakrdl_bsv\"),\n        autoescape=select_autoescape(),\n    )\n    template = env.get_template(\"config_signal.bsv\")\n    print(template.render(attr=attr, node=node), file=self.file)\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal.PrintBSVSignal.enter_Reg","title":"enter_Reg","text":"<pre><code>enter_Reg(node)\n</code></pre> <p>Reg  Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_signal.py</code> <pre><code>def enter_Reg(self, node):\n    \"\"\"Reg  Handler.\"\"\"\n    self.reg_name = node.get_path_segment()\n    self.hier_path = [*self.addressmap, self.reg_name]\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal.PrintBSVSignal.exit_Addrmap","title":"exit_Addrmap","text":"<pre><code>exit_Addrmap(node)\n</code></pre> <p>Addrmap  Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_signal.py</code> <pre><code>def exit_Addrmap(self, node):\n    \"\"\"Addrmap  Handler.\"\"\"\n    self.addressmap.pop()\n</code></pre>"},{"location":"reference/peakrdl_bsv/print_bsv_signal/#peakrdl_bsv.print_bsv_signal.PrintBSVSignal.exit_Reg","title":"exit_Reg","text":"<pre><code>exit_Reg(node)\n</code></pre> <p>Reg  Handler.</p> Source code in <code>src/peakrdl_bsv/print_bsv_signal.py</code> <pre><code>def exit_Reg(self, node):\n    \"\"\"Reg  Handler.\"\"\"\n    self.indent -= 1\n</code></pre>"},{"location":"reference/peakrdl_bsv/templates/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> templates","text":""},{"location":"reference/peakrdl_bsv/templates/#peakrdl_bsv.templates","title":"templates","text":"<p>Init File.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}